//
function getAllUrlParams(url) {

    // get query string from url (optional) or window
    var queryString = url ? url.split('?')[1] : window.location.search.slice(1);

    // we'll store the parameters here
    var obj = {};

    // if query string exists
    if (queryString) {

        // stuff after # is not part of query string, so get rid of it
        queryString = queryString.split('#')[0];

        // split our query string into its component parts
        var arr = queryString.split('&');

        for (var i=0; i<arr.length; i++) {
            // separate the keys and the values
            var a = arr[i].split('=');

            // in case params look like: list[]=thing1&list[]=thing2
            var paramNum = undefined;
            var paramName = a[0].replace(/\[\d*\]/, function(v) {
                paramNum = v.slice(1,-1);
                return '';
            });

            // set parameter value (use 'true' if empty)
            var paramValue = typeof(a[1])==='undefined' ? true : a[1];

            // (optional) keep case consistent
            paramName = paramName.toLowerCase();
            paramValue = paramValue.toLowerCase();

            // if parameter name already exists
            if (obj[paramName]) {
                // convert value to array (if still string)
                if (typeof obj[paramName] === 'string') {
                    obj[paramName] = [obj[paramName]];
                }
                // if no array index number specified...
                if (typeof paramNum === 'undefined') {
                    // put the value on the end of the array
                    obj[paramName].push(paramValue);
                }
                // if array index number specified...
                else {
                    // put the value at that index number
                    obj[paramName][paramNum] = paramValue;
                }
            }
            // if param name doesn't exist yet, set it
            else {
                obj[paramName] = paramValue;
            }
        }
    }

    return obj;
}

var player = {
    paused_by_subs_hover: false
};
player.init = function() {
    if (this.inited) return;
    this.inited = true;
    if (!user.payed && (media_type === "films" || media_type === "serial" || media_type === "serials-light")) this.timeChecker.init();
    if (!window.SUBTITLES || window.SUBTITLES.length === 0) return;


    if (storage.get("vid-enSub-enabled") === false) player.subs.langs.en.visibility = "hidden";
    if (storage.get("vid-ruSub-enabled") === false) player.subs.langs.ru.visibility = "hidden";

     if(getAllUrlParams().lang_video=='rus'){
       player.subs.langs.en.visibility = "hidden";
      player.subs.langs.ru.visibility = "hidden";
         console.log('player.init maybe sub '+window.location.href );
     }




    this.subs.init();
    if (media_type === "serial") {
        this.subslist.init();
        this.pausemode.init();
        this.explanation.init();
        this.quiz.init();
        this.popstateListener();
        this.isMovieLight = 0
    } else if (media_type === "films" || media_type === "serials-light") {
        this.subslist.init();
        this.pausemode.init();
        this.popstateListener();
        this.isMovieLight = 1
    }
    window.videoSettingsControls()
};
player.timeChecker = {
    init: function() {
        video_api.on("timeupdate", this.listener);
        video_api.on("seeked", this.seeked)
    },
    listener: function() {
        if (video_api.currentTime() > 600) player.timeChecker.hideVideo()
    },
    seeked: function() {
        if (video_api.currentTime() > 600) player.timeChecker.hideVideo();
        else player.timeChecker.showVideo()
    },
    hideVideo: function() {
        console.log('hide video0')
        // video_api.pause();
        // if (video_api.isFullScreen) video_api.exitFullscreen();
        // document.getElementById("free_user_content").style.display = "flex";
        // if (window.SUBTITLES.length > 0) player.subslist.clear();
        // video_api.controlBar.progressControl.seekBar.off("click");
        // video_api.controlBar.progressControl.seekBar.off("mousedown");
        // video_api.controlBar.progressControl.seekBar.off("touchstart");
        // video_api.controlBar.playToggle.off("click");
        // video_api.controlBar.settingsControl.off("click");
        // video_api.controlBar.volumeControl.off("click");
        // video_api.controlBar.volumeControl.off("focus");
        // video_api.controlBar.fullscreenToggle.off("click")
    },
    showVideo: function() {
        document.getElementById("free_user_content").style.display = "none";
        video_api.play()
    }
};
player.show_hide_control_bar = function() {
    var $bar = $("div.vjs-control-bar"),
        is_active = $bar.hasClass("active"),
        fullscreen = $("body").hasClass("video-fullscreen");
    clearTimeout(window.controlbar_timeout);
    if (!fullscreen && is_active) return;
    if (!fullscreen) {
        $bar.addClass("active").show();
        $(".gradient-overlay").removeClass("bottomed");
        $(video).find(".vid-subs").css("bottom", "")
    } else {
        if (!is_active) {
            $bar.addClass("active").show();
            $(".gradient-overlay").removeClass("bottomed");
            $(video).find(".vid-subs").css("bottom", "")
        }
        window.controlbar_timeout = setTimeout(function() {
            $("div.vjs-control-bar").animate({
                height: ["toggle", "swing"]
            }, 500, "linear", function() {
                $(this).removeClass("active");
                $(".gradient-overlay").addClass("bottomed");
                $(".vid-subs").each(function() {
                    var bottomCssValue = parseInt($(this).css("bottom"), 10) - $bar.height();
                    $(this).css("bottom", bottomCssValue + "px")
                })
            })
        }, 4e3)
    }
};
player.settings = {
    autopause: false,
    video_quality: "hd",
    quizes: true,
    explanations: true,
    explanations_auto: true,
    translator: true,
    prev_piece_arrow: true,
    prev_piece: false,
    prev_piece_animation_duration: 200,
    pausemode_subs_animation: true,
    sub_visibility_time_after_finish: 2e3,
    max_in_subslist: 20,
    paused_by_hover: false,
    scenario: true,
    getOption: function(name) {
        if (name === "autopause" && !window.audio_pieces_available) return false;
        return storage.get("player." + name) !== null ? storage.get("player." + name) : this[name]
    },
    setOption: function(name, value) {
        this[name] = value = value == "on" ? true : value == "off" ? false : value;
        storage.set("player." + name, value)
    },
    set: function(name, value) {
        this.setOption(name, value);
        player.settings_controls.applyChanges(name);
        $("#vid-settings-controls").find("li." + name).toggleClass("inactive").find("input[name=" + name + "]").uiCheck(value)
    }
};
player.subs = {
    current_index: 0,
    current: {
        en: "",
        ru: "",
        start: 0,
        finish: 0,
        hero: {
            en: "",
            ru: "",
            photo: ""
        }
    },
    font_size: 30,
    min_font_size: 30,
    font_size_factor: 2,
    langs: {
        en: {
            visibility: "visible"
        },
        ru: {
            visibility: "visible"
        }
    },
    html: "",
    sub_ended: false,
    init: function() {
        var self = this;
        this.element = document.getElementById("vid-subs");
        this.startListening();
        video_api.on("fullscreenchange", this.update);
        video_api.on("play", onplay);

        function onplay() {
            audio.pause && audio.pause();
            player.subs.next_piece_allowed = true;
            player.subs.updateCurrentPiece()
        }
        audio.addEventListener("paused", function() {
            player.subs.playPieceAudio.active = false
        });
        $(this.element).on("click", ".arrow-right, .arrow-left", function() {
            if ($(this).is(".arrow-left")) {
                self.toPiece(self.current_index - 1)
            } else {
                self.toPiece(self.current_index + 1)
            }
        });
        $(document).ready(function() {
            if (localStorage.getItem("subsFontSizeNum")) {
                this.font_size = +localStorage.getItem("subsFontSizeNum");
                video.find("#vid-subs").css("font-size", localStorage.getItem("subsFontSizeNum") + "px");
                video.find("#vid-subslist-sub-current").css("font-size", localStorage.getItem("subsFontSizeNum") + "px");
                video.find("#vid-subslist .sub .sub-container").css("font-size", localStorage.getItem("subsFontSizeNum") + "px")
            }
        })
    },
    getCurrentPiece: function() {
        var currentTime = video_api.currentTime();
        var currentPiece = SUBTITLES[this.current_index];
        var nextPiece = SUBTITLES[this.current_index + 1];
        if (currentPiece === undefined) {
            currentPiece = 0
        }
        if (currentTime >= currentPiece.start && currentTime <= currentPiece.finish) {
            return {
                index: this.current_index,
                piece: currentPiece
            }
        }
        if (nextPiece && currentTime >= nextPiece.start && currentTime <= nextPiece.finish) {
            return {
                index: this.current_index + 1,
                piece: SUBTITLES[this.current_index + 1]
            }
        }
        if (currentTime < SUBTITLES[0].start) {
            return {
                index: 0,
                piece: {
                    en: "",
                    ru: ""
                }
            }
        }
        var piece = player.subs.getPieceByTime(currentTime);
        return {
            index: piece.index,
            piece: piece.piece
        }
    },
    getPieceByTime: function(time) {
        var currentPiece = SUBTITLES[this.current_index];
        var length = SUBTITLES.length;
        if (time < SUBTITLES[0].start) {
            return {
                piece: this.current,
                index: this.current_index
            }
        }
        if (time < currentPiece.start || time > currentPiece.finish) {
            for (var i = 0; i < length; i++) {
                if (time >= SUBTITLES[i].start && (SUBTITLES[i + 1] && time < SUBTITLES[i + 1].start || !SUBTITLES[i + 1])) {
                    return {
                        piece: SUBTITLES[i],
                        index: i
                    }
                }
            }
        }
        return {
            piece: this.current,
            index: this.current_index
        }
    },
    setCurrentPiece: function(data) {
        this.current_index = data.index;
        this.current = data.piece
    },
    updateCurrentPiece: function() {
        var piece = player.subs.getCurrentPiece();
        player.subs.setCurrentPiece(piece);
        if (piece.piece.en == "") $("#vid-prev-subs").remove()
    },
    showCurrentPiece: function() {
        if (player.pausemode.active) return;
        var currentTime = video_api.currentTime();
        if (currentTime < SUBTITLES[0].start) return;
        var ind = this.current_index;
        var piece = this.getCurrentPiece();
        if (currentTime >= SUBTITLES[ind].finish - 0 + player.settings.getOption("sub_visibility_time_after_finish") / 1e3) {
            $(this.element).addClass("none");
            $("#vid-prev-subs").remove()
        } else $(this.element).removeClass("none");
        if (video_api.paused() || video_api.seeking()) {
            player.autopause_allowed = false
        }
        if (!this.sub_ended && (piece.index == ind && SUBTITLES[ind] && currentTime > SUBTITLES[ind].finish || piece.index !== ind)) {
            this.sub_ended = true;
            this.onSubEnded(typeof SUBTITLES[piece.index + 1] === "undefined");
            return
        }
        if (this.next_piece_allowed === false) return;
        player.subs.setCurrentPiece(piece);
        if (ind > 0 && piece.index !== ind) {
            this.onBeforeNextSub()
        }
        player.subs.showPiece();
        if (ind > 0 && piece.index !== ind) {
            this.sub_ended = false;
            this.onAfterNextSub()
        }
    },
    toPiece: function(index) {
        var self = this;
        var piece = SUBTITLES[index];
        if (!piece) return;
        self.current_index = index;
        player.subs.showPiece(piece);
        video_api.currentTime(piece.start);
        if (media_type == "serial" || media_type == "serials-light" || media_type == "films") {
            self.stopListening();
            if (this.toPiece.timeupdate) return;
            this.toPiece.timeupdate = 1;
            video_api.on("timeupdate", function(e) {
                if (this.currentTime() > piece.finish) {
                    self.startListening()
                }
            })
        }
    },
    onSubEnded: function(is_last) {
        if (media_type === "serial" || media_type === "serials-light") return;
        if (player.settings.autopause && player.autopause_allowed) {
            var current_index = this.current_index;
            this.next_piece_allowed = false;
            video_api.pause();
            setTimeout(function() {
                playPhraseAudio(player.subs.current_index);
                audio.addEventListener("ended", function() {
                    player.subs.next_piece_allowed = true;
                    video_api.play();
                    player.subs.showCurrentPiece()
                })
            }, 200)
        }
        if (is_last && user.payed == true) {
            var next_episode = episodesList.getNextEpisode();
            var autocontinue = storage.get("autocontinue");
            if (next_episode !== null && autocontinue !== null && autocontinue !== "off") {
                var title = "Эпизод " + next_episode.e + ", Сезон " + next_episode.s;
                title += "<br>" + next_episode.episode.title;
                title += '<div id="cancel_next_episode" class="link-like">Отменить</div>';
                puzzleNotification(title, "", 'Автоматический переход к следующему эпизоду через <span id="pe-notification__cd"></span>', 0, false);
                startTimer(10, $("#pe-notification__cd"), function() {
                    episodesList.next();
                    $(".puzzle-notification").fadeOut(400)
                })
            }
            if (typeof post_id !== "undefined") {
                watchEpisode(post_id)
            } else {
                watchEpisode(episodesList.current.episode.post_id)
            }
        }
    },
    onBeforeNextSub: function() {
        player.autopause_allowed = true;
        this.addPrevPiece()
    },
    onAfterNextSub: function() {
        player.autopause_allowed = true
    },
    showPiece: function(piece) {
        this.current = piece || this.current;
        var html = this.generateHTML();
        if (this.html == html && $(this.element).html() != "") {
            player.highlightWord(this.element, this.highlight);
            return
        }
        this.html = html;
        $(this.element).html(html).removeClass("none").attr("data-index", this.current_index).attr("data-piece_index", this.current_index);
        if (media_type == "video") {
            $(".lang-en", this.element).append("<div />");
            $(".lang-en div:last", this.element).html($(svg_icons.volume).clone())
        }
        this.updateLanguages();
        player.subs.wrapWords(this.element);
        if (this.highlight && this.highlight.piece_index != this.current_index) this.highlight = null;
        player.highlightWord(this.element, this.highlight)
    },
    update: function() {
        player.subs.showCurrentPiece();
        player.subs.updateLanguages();
        player.subs.addPrevPiece(false);
        var $button_en = $(".toggleEnSub-control");
        var $button_ru = $(".toggleRuSub-control");
        var $overlay = $("div.gradient-overlay");
        if (!($button_en.hasClass("active") || $button_ru.hasClass("active"))) $overlay.hide();
        else $overlay.show()
    },
    updateLanguages: function() {
        var $subs = $("#vid-subs"),
            $text_ru = $subs.find("p.lang-ru"),
            $text_en = $subs.find("p.lang-en");
        for (var lang in this.langs) {
            var text_ru = $text_ru.text();
            var text_en = $text_en.text();
            if (typeof post_type == "string") {
                if (text_en != text_ru && post_type == "academy") {
                    $text_ru.css("display", "block");
                    $text_en.css("display", "block")
                } else if (text_ru == text_en && post_type == "academy") {
                    $text_ru.css("display", "none")
                }
            }
            $subs.removeClass("lang-" + lang + "-visible lang-" + lang + "-hidden").addClass("lang-" + lang + "-" + player.subs.langs[lang].visibility)
        }
    },
    generateHTML: function(piece) {
        piece = piece || this.current;
        var html = "";
        for (var lang in this.langs) {
            var text = this.prepareText(piece[lang]);


            text = typeof text !== "string" ? "" : text;
            var text_ru = player.subs.cleanTags(piece["ru"]);
            var text_en = player.subs.cleanTags(piece["en"]);
            if (typeof post_type == "string") {
                if (post_type == "academy") {
                    if (text_ru != text_en && "en" == lang) {
                        html += '<p class="text lang-' + lang + ' word "><span style="text-decoration:line-through; color: red;"><span style="color:white;">' + text + "</span></span></p>"
                    } else if (text_ru == text_en && "ru" == lang) {
                        html += '<p class="text lang-' + lang + ' word " style="display:none;">' + text + "</p>"
                    } else {
                        html += '<p class="text lang-' + lang + ' word " >' + text + "</p>"
                    }
                } else {
                    html += '<p class="text lang-' + lang + ' word ">' + text + "</p>"
                }
            } else {
                html += '<p class="text lang-' + lang + '  word ">' + text + "</p>"
            }
        }
        if (piece.substrate) {
            html += "<div class=bg></div>"
        }
        if (media_type == "video") {
            html += '<div class="arrow-left' + (this.current_index === 0 ? " disabled" : "") + '"></div>' + '<div class="arrow-right' + (this.current_index == SUBTITLES.length - 1 ? " disabled" : "") + '"></div>'
        }
        return html
    },
    playPieceAudio: function(index, onended) {
        index = index || player.subs.current_index;
        player.subs.playPieceAudio.active = true;
        video_api.pause();
        $("#vid-subs").css("display", "block");
        player.subs.showPiece();
        audio.volume(video_api.volume());
        audio.playPiece(index, function() {
            player.subs.playPieceAudio.active = false;
            onended && onended()
        })
    },
    cleanTags: function(text) {
        if (text) {
            text = text.replace(/<expr.*?>(.*?)<\/expr>/, "$1");
            text = text.replace(/<expr>/, "");
            text = text.replace(/.*data-base="([^"]*)".*/, "$1");
            text = text.replace(/\[explanation:\s+(.*?)\]/, "$1");
            text = text.replace(/\[(?:quiz|explanation)\:([^\]]*)\]/, "$1");
            text = text.replace("</expr>", "")
        }
        return text
    },
    prepareText: function(text) {
        if (text) {
            text = text.replace(/\[explanation\:\s*([^\]]+)\]/g, "<span class=explanation>$1</span>");
            text = text.replace(/\[quiz\:\s*([^\]]+)\]/g, "<span class=quiz>$1</span>");
            text = text.replace(/\n/g, "<br>")
        }
        return text
    },
    listener: function() {
        player.subs.showCurrentPiece()
    },
    startListening: function() {
        video_api.on("timeupdate", this.listener)
    },
    stopListening: function() {
        video_api.off("timeupdate", this.listener)
    },
    addPrevPiece: function(animation) {
        if (typeof animation == "undefined") animation = true;
        $("#vid-prev-subs").remove();
        if (video_api.seeking() || !player.settings.getOption("prev_piece") || $("#vid-subs").is(":hidden")) return;
        var current_sub = $(this.element);
        var current_sub_width = current_sub.width();
        var zoom = .8;
        var duration = player.settings.getOption("prev_piece_animation_duration");
        var css = {
            fontSize: this.font_size * zoom + "px",
            width: current_sub_width * zoom,
            left: 0
        };
        if (animation) {
            var next_sub_clone = this.cloneOf(this.current_index);
            var current_sub_clone = current_sub.clone().attr("id", "vid-prev-subs").insertAfter(current_sub);
            if (video_api.isFullscreen()) {
                css.bottom = 150 + next_sub_clone.height() + 25
            } else {
                css.bottom = 77 + next_sub_clone.height() + 25
            }
            current_sub.hide();
            current_sub_clone.animate(css, duration, "linear", function() {
                if (!player.pausemode.active) $(player.subs.element).show()
            })
        } else {
            var prev_piece = SUBTITLES[this.current_index - 1];
            if (!prev_piece) return;
            var html = '<div id="vid-prev-subs" class="balloon-row vid-subs ';
            for (var lang in this.langs) {
                html += "lang-" + lang + "-" + this.langs[lang].visibility + " "
            }
            html = html.replace(/\s+$/, "");
            html += '">' + this.generateHTML(prev_piece) + "</div>";
            var prev_sub = $(html).insertAfter(current_sub);
            if (video_api.isFullscreen()) {
                css.bottom = 150 + current_sub.height() + 25
            } else {
                css.bottom = 77 + current_sub.height() + 25
            }
            prev_sub.css(css);
            player.subs.wrapWords(prev_sub)
        }
    },
    cloneOf: function(piece) {
        if ($.isNumeric(piece)) piece = SUBTITLES[piece];
        var html = this.generateHTML(piece);
        if ($("#vid-subs-clone").length) $("#vid-subs-clone").remove();
        var $clone = $(this.element).clone().attr("id", "vid-subs-clone").css("fontSize", this.font_size + "px").html(html).appendTo("#video");
        player.subs.wrapWords($clone);
        return $clone
    },
    wrapWords: function(sub) {
        if (sub instanceof jQuery) sub = sub[0];
        var phrases_en = $(".text.lang-en", sub);
        for (var i = 0; i < phrases_en.length; i++) {
            _wrapWords(phrases_en[i])
        }
        var quizes = sub.querySelectorAll("span.quiz");
        for (var i = 0; i < quizes.length; i++) {
            _wrapWords(quizes[i]);
            var icon = svg_icons.qmark.cloneNode(true);
            $(icon).on("click", function() {
                player.quiz.show($(this).parent().text(), true)
            });
            quizes[i].insertBefore(icon, quizes[i].firstChild)
        }
        var explanations = sub.querySelectorAll("span.explanation");
        for (var i = 0; i < explanations.length; i++) {
            _wrapWords(explanations[i]);
            var icon = svg_icons.movie_frame.cloneNode(true);
            $(icon).on("click", function() {
                player.explanation.show(this, $(this).parent().text())
            });
            explanations[i].insertBefore(icon, explanations[i].firstChild)
        }

        function _wrapWords(element) {
            wrapWords(element)
        }
    }
};
player.subslist = {
    pieces: [],
    html: "",
    init: function() {
        this.element = document.getElementById("vid-subslist-subs-container");
        this.initScroll();
        this.initTouchscreenScroll();
        this.generateSubs();
        this.lazyloadSetup();
        this.update();
        video_api.on("timeupdate", function() {
            storage.set("episode" + post_id, video_api.currentTime());
            if (!player.pausemode.active || !player.settings.getOption("scenario")) return;
            player.subslist.update()
        });
        video_api.on("play", function() {
            $("#vid-subslist").removeClass("animated");
            if (player.background_video) {
                player.background_video.remove();
                player.background_video = null
            }
        });
        video_api.on("seeked", function() {
            player.subslist.stopAudioPiece(true)
        })
    },
    show: function() {
        if (!player.settings.getOption("scenario")) {
            this.element.style.display = "none";
            return false
        }
        this.update();
        setTimeout("player.subslist.updateScroll()", 0);
        video_api.pause()
    },
    update: function() {
        player.subs.updateCurrentPiece();
        var subs = player.subslist.element.childNodes,
            len = subs.length;
        while (len--) /sub-prev/.test(subs[len].className) && $(subs[len]).removeClass("sub-prev");
        var index = player.subs.current_index > 0 ? player.subs.current_index - 1 : 0;
        var sub = document.getElementById("vid-subslist-sub-" + index);
        while (!sub && index) sub = document.getElementById("vid-subslist-sub-" + --index);
        sub && $(sub).addClass("sub-prev");
        var sub_containers = sub.getElementsByClassName("sub-container");
        var sub0_is_multiple = SUBTITLES[0].hero && SUBTITLES[0].hero.photo == SUBTITLES[1].hero.photo;
        if (sub0_is_multiple) {
            var sub0 = document.getElementById("vid-subslist-sub-0");
            if (sub0.style.display != "block") sub0.style.display = ""
        }
        if (sub_containers.length > 1) {
            for (var i = 0; i < sub_containers.length; i++) {
                $(sub_containers[i]).removeClass("prev_sub_container");
                if (sub_containers[i].dataset.index == player.subs.current_index) {
                    if (i == 0) {
                        if (sub0_is_multiple) sub0.style.display = "none"
                    } else $(sub_containers[i - 1]).addClass("prev_sub_container")
                }
            }
        }
        this.updateCurrentPiece();
        if (video_api.currentTime() < SUBTITLES[player.subs.current_index].start - .2 && (player.subs.current_index == 0 || SUBTITLES[-player.subs.current_index].finish > video_api.currentTime())) {
            this.sub_current.style.display = "none";
            if (player.subs.current_index == 0) this.element.style.display = "none"
        } else {
            this.element.style.display = "block";
            this.sub_current.style.display = "block";
            this.updateCurrentPiecePos();
            this.lazyloadUpdate()
        }
        this.updateScroll()
    },
    generateSubs: function() {
        var i = 0;
        this.element.innerHTML = this.generateSubsHTML(0, SUBTITLES.length - 1);
        player.subs.wrapWords(this.element);
        if (!("dataset" in document.body)) {
            var subs = this.element.childNodes;
            for (i = 0; i < subs.length; i++) {
                subs[i].dataset = {
                    index: subs[i].getAttribute("data-index")
                }
            }
            subs = this.element.getElementsByClassName("sub-container");
            for (i = 0; i < subs.length; i++) {
                subs[i].dataset = {
                    index: subs[i].getAttribute("data-index")
                }
            }
        }
        var items = this.element.getElementsByClassName("button-play-video");
        for (i = 0; i < items.length; i++) {
            items[i].appendChild(svg_icons.play.cloneNode(true))
        }
        items = this.element.getElementsByClassName("button-play-audio");
        for (i = 0; i < items.length; i++) {
            items[i].appendChild(svg_icons.volume.cloneNode(true))
        }
        var simplified = !SUBTITLES[0].hero;
        if (simplified) {
            var sub_containers = this.element.getElementsByClassName("sub-container");
            for (i = 0; i < sub_containers.length - 1; i++) {
                sub_containers[i].onclick = function(event) {
                    if ($(event.target).is(".word-wrapper, svg, path, .button")) return;
                    player.subslist.playFromPiece(this.dataset.index)
                }
            }
        }
    },
    generateSubsHTML: function(from, to) {
        var html = "";
        var simplified = !SUBTITLES[0].hero;
        for (var i = from; i <= to; i++) {
            html += '<div id="vid-subslist-sub-' + i + '" class="sub' + (simplified ? " simplified" : "") + (SUBTITLES[i].hero instanceof Array ? " heroes" + SUBTITLES[i].hero.length : "") + '" data-index="' + i + '">';
            html += this.generatePieceHTML(i);
            if (!simplified) {
                var c = 0;
                while (++c < 3 && i + 1 < to && (SUBTITLES[i].hero.photo && SUBTITLES[i].hero.photo == SUBTITLES[i + 1].hero.photo) && SUBTITLES[i + 1].start - SUBTITLES[i].finish < 5) {
                    html += this.generatePieceHTML(++i, false)
                }
                html += "<div class=bg>";
                var classes = "fill t tr r br b bl l2 traingle l1 tl".split(" ");
                for (var j = 0; j < classes.length; j++) {
                    html += '<div class="' + classes[j] + '"></div>'
                }
                html += "</div>"
            }
            html += "</div>"
        }
        return html
    },
    generatePieceHTML: function(piece_index, hero_pic) {
        var piece = SUBTITLES[piece_index];
        var html = "";
        if (hero_pic !== false) {
            html += "<span class=piece-num" + (piece.hero ? ' style="left:-119px"' : "") + ">" + (piece_index + 1) + "</span>"
        }
        if (piece.hero && hero_pic !== false) {
            var hero = piece.hero;
            if (!(hero instanceof Array)) hero = [hero];
            for (var i = 0; i < hero.length; i++) {
                html += '<div class="hero hero-' + (i + 1) + '">' + '<img src="' + STATIC_HOME + hero[i].photo + '" class=photo>' + '<div class="button-play-video" onclick="player.subslist.playFromPiece(' + piece_index + ')"></div>' + '<div class="name"><span>' + hero[i].en + "</span></div>" + "</div>"
            }
        }
        html += '<div class="balloon-row sub-container" data-index="' + piece_index + '" data-piece_index="' + piece_index + '">';
        for (var lang in player.subs.langs) {
            var text = player.subs.prepareText(piece[lang]);
            var text_ru = player.subs.cleanTags(piece["clean_ru"]);
            var text_en = player.subs.cleanTags(piece["clean_en"]);
            text = typeof text !== "string" ? "" : text;
            if (typeof post_type == "string") {
                if (post_type == "academy") {
                    if (text_ru != text_en && "en" == lang) {
                        html += '<p class="text lang-' + lang + ' word "><span style="text-decoration:line-through;    color: red;"><span style="color:white;">' + text + "</span></span></p>"
                    } else if (text_ru == text_en && "ru" == lang) {
                        html += '<p class="text lang-' + lang + ' word " style="display:none;">' + text + "</p>"
                    } else {
                        html += '<p class="text lang-' + lang +  ' word " >' + text + "</p>"
                    }
                } else {
                    html += '<p class="text lang-' + lang + ' word ">' + text + "</p>"
                }
            } else {
                html += '<p class="text lang-' + lang + ' word ">' + text + "</p>"
            }
        }
        if (window.audio_pieces_available) {
            html += '<div class="button button-play-audio" onclick="player.subslist.playPieceAudio(' + piece_index + ')"></div>'
        }
        html += "</div>";
        return html
    },
    generateCurrentPieceHTML: function() {
        var current_index = player.subs.current_index;
        var html = '<div class="balloon-row sub-container" data-piece_index"' + current_index + '" >';
        for (var lang in player.subs.langs) {
            var text = player.subs.prepareText(SUBTITLES[current_index][lang]);
            var text_ru = player.subs.prepareText(SUBTITLES[current_index]["ru"]);
            var text_en = player.subs.prepareText(SUBTITLES[current_index]["en"]);
            if (typeof post_type == "string") {
                if (post_type == "academy") {
                    if (text_ru != text_en && "ru" == lang) {
                        html += '<p class="text lang-' + lang + ' word "><span style="text-decoration:line-through;    color: red;"><span style="color:white;">' + text + "</span></span></p>"
                    } else if (text_ru == text_en && "ru" == lang) {
                        html += '<p class="text lang-' + lang + ' word " style="display:none;">' + text + "</p>"
                    } else {
                        html += '<p class="text lang-' + lang + ' word ">' + text + "</p>"
                    }
                }
            } else {
                html += '<p class="text lang-' + lang + ' word ">' + text + "</p>"
            }
        }
        html += "</div>" + '<div class="button button-play-audio" onclick="player.subslist.playPieceAudio(' + current_index + ', true)"></div>' + '<div class="bg"></div>';
        return html
    },
    updateCurrentPiece: function() {
        var div = this.sub_current || document.getElementById("vid-subslist-sub-current");
        if (div && div.dataset && div.dataset.index == player.subs.current_index) {
            player.highlightWord(div, this.highlight);
            return
        }
        var len = div && div.childNodes.length;
        if (len)
            while (len--) div.removeChild(div.childNodes[len]);
        if (!div) {
            div = document.createElement("div");
            div.id = "vid-subslist-sub-current";
            div.className = "balloon-row sub sub-current";
            this.element.appendChild(div);
            this.sub_current = div
        }
        if (document.getElementById("vid-subslist-sub-current") === null) {
            this.element.appendChild(div)
        }
        this.sub_current = div;
        if (div.dataset == void 0) div.dataset = {};
        div.dataset.index = player.subs.current_index;
        div.dataset.piece_index = player.subs.current_index;
        var c = document.createElement("div");
        c.className = "sub-container";
        for (var lang in player.subs.langs) {
            var p = document.createElement("p");
            p.className = "text lang-" + lang + ' word ';
            var text_ru = player.subs.cleanTags(SUBTITLES[player.subs.current_index]["clean_ru"]);
            var text_en = player.subs.cleanTags(SUBTITLES[player.subs.current_index]["clean_en"]);
            var text = SUBTITLES[player.subs.current_index][lang];
            text = lang == "en" ? player.subs.prepareText(text) : text;
            if (typeof post_type == "string") {
                if (post_type == "academy") {
                    if (text_en != text_ru && lang == "en") {
                        text = '<span style="text-decoration: line-through; color: red;"><span style="color:white;">' + text + "</span></span>"
                    } else if (text_ru == text_en && lang == "ru") {
                        p.style.display = "none"
                    }
                }
            }
            p.innerHTML = text;
            c.appendChild(p)
        }
        div.appendChild(c);
        if (media_type !== "films") {
            var aud = document.createElement("div");
            aud.className = "button button-play-audio";
            aud.setAttribute("onclick", "player.subslist.playPieceAudio(" + player.subs.current_index + ", true)");
            aud.appendChild(svg_icons.volume.cloneNode(true));
            div.appendChild(aud)
        }
        var bg = document.createElement("div");
        bg.className = "bg";
        div.appendChild(bg);
        player.subs.wrapWords(div);
        if (this.highlight && this.highlight.piece_index != player.subs.current_index) this.highlight = null;
        player.highlightWord(div, this.highlight)
    },
    playPiece: function(index) {
        var scrollTop = player.subslist.scroll_content.scrollTop;
        var currentTime = video_api.currentTime();
        player.pausemode.escape();
        player.playPiece(SUBTITLES[index].start, SUBTITLES[index].finish, {
            "pause.subslistPlayPiece": function() {
                player.subslist.scrollPosition = scrollTop;
                video_api.pause();
                video_api.currentTime(currentTime);
                player.pausemode.active = true;
                $("#vid-pause-mode").show();
                $(this).off("pause.subslistPlayPiece")
            }
        })
    },
    playPieceOnBackground: function(index, is_current) {
        this.stopAudioPiece(true);
        var $sub_container = is_current ? $(this.sub_current) : $(".sub-container[data-index=" + index + "]:first", this.element);
        var bg_width = $sub_container.outerWidth();
        if ($sub_container.is(this.sub_current)) {
            bg_width = $(".bg", $sub_container).outerWidth() - 2
        }
        var $progress = $("<div id=play-progress class=play-progress />").appendTo($sub_container);
        player.background_video = document.createElement("video");
        if (player.background_video.src != video_api.currentSrc()) {
            player.background_video.volume = 0;
            var src = video_api.currentSrc();
            if (browser.webkit) src += "?subslist_bg";
            player.background_video.src = src
        }
        player.background_video.play();
        player.playPiece(SUBTITLES[index].start, SUBTITLES[index].finish, {
            "playing.subslistPlayPieceBg": function() {
                var vid = this;
                var interval_id = setInterval(function() {
                    if (vid.readyState != 4 || vid.currentTime <= SUBTITLES[index].start) return;
                    clearInterval(interval_id);
                    player.background_video.volume = video_api.volume();
                    var duration_ms = (SUBTITLES[index].finish - SUBTITLES[index].start) * 1e3;
                    var play_progress = $progress[0];
                    var sub_container = play_progress.parentNode;
                    var w = bg_width;
                    $progress.addClass("playing").animate({
                        width: w
                    }, {
                        duration: duration_ms - 40,
                        easing: "linear",
                        step: function(left) {
                            if (left > w - 7) {
                                var r = is_current ? 6 : 3;
                                if (is_current || !$(sub_container).prev().hasClass("sub-container")) play_progress.style.borderTopRightRadius = r + "px";
                                if (is_current || !$(sub_container).prev().hasClass("sub-container")) play_progress.style.borderBottomRightRadius = r + "px"
                            }
                        }
                    })
                }, 15);
                $(this).off("playing.subslistPlayPieceBg")
            },
            "pause.subslistPlayPieceBg": player.subslist.stopAudioPiece
        }, player.background_video)
    },
    playPieceAudio: function(index, is_current) {
        if (!audio_pieces_available) return;
        this.stopAudioPiece(true);
        var sub_container = is_current ? this.sub_current : $(".sub-container[data-index=" + index + "]:first", this.element);
        $("<div id=play-progress class=play-progress />").appendTo(sub_container);
        audio.playPiece(index, {
            "playing.subslistPlayPieceAudio": function() {
                var play_progress = document.getElementById("play-progress");
                var sub_container = play_progress.parentNode;
                var is_current = sub_container.id == "vid-subslist-sub-current";
                var w = is_current ? sub_container.getElementsByClassName("bg")[0].clientWidth : sub_container.clientWidth;
                audio.volume(video_api.volume());
                var duration_ms = audio.duration() * 1e3;
                $(play_progress).addClass("playing").animate({
                    width: w
                }, {
                    duration: duration_ms,
                    easing: "linear",
                    step: function(left) {
                        if (left > w - 7) {
                            var r = is_current ? 6 : 3;
                            if (is_current || !$(sub_container).prev().is(".sub-container")) play_progress.style.borderTopRightRadius = r + "px";
                            if (is_current || !$(sub_container).next().is(".sub-container")) play_progress.style.borderBottomRightRadius = r + "px"
                        }
                    }
                })
            },
            "pause.subslistPlayPieceAudio": function() {
                player.subslist.stopAudioPiece()
            }
        })
    },
    stopAudioPiece: function(quick_remove) {
        var $progress = $(".play-progress");
        if (audio_pieces_available) {
            audio.pause();
            if (audio.src() != "") {
                try {
                    audio.obj.currentTime = 0
                } catch (e) {
                    return
                }
            }
            audio.removeEventListener("playing.subslistPlayPieceAudio pause.subslistPlayPieceAudio")
        } else {
            $(player.background_video).off("playing.subslistPlayPieceBg pause.subslistPlayPieceBg");
            if (player.background_video) {
                player.background_video.pause();
                player.background_video.remove();
                player.background_video = null
            }
        }
        if (quick_remove === true) $progress.remove();
        else {
            $progress.css({
                opacity: 0,
                transition: "opacity 0.4s ease"
            });
            setTimeout(function() {
                $progress.remove()
            }, 400)
        }
    },
    playFromPiece: function(index) {
        console.log(['playFromPiece', SUBTITLES[index].start,index]);
        player.playFromTime(SUBTITLES[index].start)
    },
    updateCurrentPiecePos: function() {
        var area_height = this.element.clientHeight;
        var curpos = this.sub_current.style.position;
        if (curpos == "absolute") {
            area_height += this.sub_current.clientHeight
        }
        var position = "absolute";
        if (area_height > this.scroll_content.clientHeight) {
            if (player.settings.pausemode_subs_animation) {
                $("#vid-subslist").addClass("animated")
            }
            position = "relative"
        }
        if (curpos != position) this.sub_current.style.position = position
    },
    lazyloadSetup: function() {
        this.autoload_style = document.createElement("style");
        $("head").append(this.autoload_style)
    },
    lazyloadUpdate: function(extra) {
        extra = extra || 0;
        var to = player.subs.current_index;
        var from = to - player.settings.max_in_subslist - extra;
        if (extra) {
            this.subs_to_show += extra;
            from = to - this.subs_to_show
        } else this.subs_to_show = player.settings.max_in_subslist;
        var html = "";
        if (from > 0) {
            while (!document.getElementById("vid-subslist-sub-" + (from - 1))) from--;
            while (!document.getElementById("vid-subslist-sub-" + (to - 1))) to--;
            html += "#vid-subslist-subs-container .sub {display:none}" + "#vid-subslist-subs-container #vid-subslist-sub-" + (from - 1) + " ~ .sub {display:block}" + "#vid-subslist-subs-container #vid-subslist-sub-" + (to - 1) + " ~ .sub {display:none}"
        }
        this.autoload_style.innerHTML = html;
        this.updateScroll()
    },
    lazyloadShowMore: function(num) {
        if (!$("#vid-subslist-sub-0").is(":visible")) {
            var sc = player.subslist.scroll_content;
            var h = sc.scrollHeight;
            var t = sc.scrollTop;
            this.lazyloadUpdate(num);
            var newh = sc.scrollHeight;
            sc.scrollTop = newh - h + t
        }
    },
    clear: function() {
        $(this.element).empty();
        this.updateScroll()
    },
    initScroll: function() {
        var self = this;
        this.scroll_content = $("#vid-subslist > .scroll-content")[0];
        this.scrollbar = new Scrollbar(this.scroll_content, "vid-subslist-subs-scroll");
        $(player.subslist.scroll_content).scroll(function(e) {
            if ($(this).scrollTop() < 250) self.lazyloadShowMore(player.settings.max_in_subslist)
        });
        video_api.on("fullscreenchange", this.updateScroll);
        disableSelection(this.scrollbar.scrollbar)
    },
    updateScroll: function() {
        player.subslist.scrollbar.setPosition(this.scrollPosition !== null && player.subslist.scrollPosition >= 0 ? player.subslist.scrollPosition : 9e5);
        player.subslist.scrollbar.update();
        player.show_hide_control_bar()
    },
    initTouchscreenScroll: function() {}
};
player.explanation = {
    active: false,
    autohide: true,
    current_target: null,
    active_video: null,
    dir: window.video_path && STATIC_HOME + video_path.replace("/series/video", "/series/explanations"),
    min_width: 188,
    max_width: 640,
    min_height: 162,
    init: function() {
        $(document).mousedown(function(e) {
            if ($("#vid-explanation").is(":visible") && e.target.id != "vid-explanation" && e.target != player.explanation.current_target && $(e.target).parents("#vid-explanation").length == 0 && !$(e.target).is("svg[onclick*=explanation]")) {
                player.explanation.hide()
            }
        })
    },
    show: function(element, text) {
        if (text == "") return;
        var self = player.explanation;
        self.active = true;
        if (self.video_api) self.video_api.dispose();
        $("#vid-explanation").remove();
        self.icon = self.current_target = element.target || element;
        if ($(self.icon).attr("class") != "movie_frame") {
            self.icon = $(".movie_frame", self.icon)[0]
        }
        var str = player.explanation.formatString(text);
        var html = "<div id=vid-explanation>" + "<div class=loading></div>" + "<div class=video-wrap>" + "<video id=vid-explanation-video autoplay preload>" + '<source src="' + self.dir + "/" + str + '.mp4" type="video/mp4">' + "</video>" + '<div class="play-toggle"></div>' + "</div>" + "</div>";
        $("body").append(html);
        self.visible = true;
        self.el = document.getElementById("vid-explanation");
        self.active_video = $("video, object", self.el)[0];
        var video_wrap = self.active_video.parentNode;

        function onready() {
            $(self.el).css("margin-left", 0);
            if (self.video_api.techName == "Flash") {
                $(".vjs-control-bar", self.el).hide()
            }
            $("#vid-explanation .play-toggle").click(function() {
                self.video_api.paused() ? self.video_api.play() : self.video_api.pause()
            });
            player.explanation.updateDimensions();
            player.explanation.updatePosition();
            if (browser.is_touchscreen && browser.is_mobile) {
                self.el.firstChild.style.display = "none";
                self.active_video.style.display = "block";
                var playicon = $("<div class=play-icon />").appendTo(video_wrap)[0];
                playicon.appendChild(svg_icons.play.cloneNode(true));
                self.video_api.on("play", function() {
                    $(playicon).hide()
                }, false);
                self.video_api.on("pause", function() {
                    $(playicon).show()
                }, false);
                if (!self.show.touchendset) {
                    self.show.touchendset = true;
                    document.addEventListener("touchend", function(event) {
                        var is_icon = event.target == self.icon && event.target.parentNode == self.icon;
                        if (is_icon) return;
                        if (event.target == video_wrap || $(event.target).parents(".video-wrap").length) self.video_api[self.video_api.paused() ? "play" : "pause"]();
                        else self.hide()
                    }, false)
                }
            }
            var interval = self.interval = setInterval(function() {
                if (self.video_api.readyState() != 4) return;
                self.el.firstChild.style.display = "none";
                self.active_video.style.display = "block";
                player.explanation.updateDimensions();
                player.explanation.updatePosition();
                clearInterval(interval)
            }, 5);
            if (self.autohide) {
                var interval2 = self.interval2 = setInterval(function() {
                    if (!self.video_api.ended()) return;
                    self.hide();
                    if (self.play_video_on_finish) {
                        self.video_api.play()
                    }
                    clearInterval(interval2)
                }, 25)
            }
            if (!video_api.paused()) {
                video_api.pause();
                self.play_video_on_finish = true
            }
        }
        self.video_api = vjs("vid-explanation-video");
        if (self.video_api.techName == "Flash") {
            $(self.el).css("margin-left", -1e3);
            self.video_api.ready(onready)
        } else onready()
    },
    hide: function() {
        player.explanation.active = false;
        this.visible = false;
        clearInterval(this.interval);
        clearInterval(this.interval2);
        this.video_api && this.video_api.dispose();
        delete this.video_api;
        $(this.el).remove()
    },
    formatString: function(str) {
        str = str.toLowerCase().replace(/[^a-z0-9]+/g, " ").replace(/[\s]+/g, " ");
        str = $.trim(str).replace(/ /g, "_");
        return str
    },
    updatePosition: function() {
        var pos = {};
        var target_offset = $(this.current_target).offset();
        if (window.video_api && video_api.isFullscreen()) {
            target_offset.top -= window.scrollY
        }
        pos.top = target_offset.top - this.el.clientHeight - 14;
        if (pos.top < video.offset().top) {
            pos.top = target_offset.top + $(this.icon).height() + 8;
            $(this.el).addClass("under")
        }
        pos.left = target_offset.left - this.el.clientWidth / 2 + $(this.icon).width() / 2 + 5;
        if (pos.left <= 0) {
            pos.left = 10
        }
        $(this.el).css(pos)
    },
    updateDimensions: function() {
        this.width = this.min_width;
        if (video_api.isFullScreen) {
            var factor_y = .456310679;
            var h = video.height();
            this.width = h * factor_y > this.max_width ? this.max_width : h * factor_y;
            if (this.width < this.min_width) {
                this.width = this.min_width
            }
        }
        if (this.active_video.videoHeight) {
            this.height = this.width * (this.active_video.videoHeight / this.active_video.videoWidth)
        } else {
            this.height = this.min_height
        }
        $(this.el).add(this.active_video).css({
            width: this.width,
            height: this.height
        })
    }
};
player.quiz = {
    current_index: null,
    current: null,
    answer: null,
    state: null,
    html: "",
    exclusions: [],
    next_action: null,
    init: function() {
        this.wrap = document.getElementById("vid-quiz");
        this.startListener();
        this.updateCurrent();
        video_api.on("play_manual", this.hide)
    },
    show: function(index, force, show_when_piece_time) {
        if (index !== null && typeof index != "undefined") {
            if (typeof index == "string" && isNaN(index)) {
                index = this.getIndexByText(index)
            }
            this.setCurrent(index)
        } else {
            this.updateCurrent()
        }
        index = index || this.current_index;
        if (this.current) {
            if (force || this.isAvailable(index)) {
                if (show_when_piece_time) {
                    var piece = player.subs.getPieceByTime(QUIZES[index].start_time).piece;
                    var middle_time = piece.start + (piece.finish - piece.start) / 2;
                    video_api.currentTime(middle_time);
                    player.subs.updateCurrentPiece()
                }
                if (user.can_editposts && !force) {
                    if (this.latest_index == index && video_api.currentTime() >= QUIZES[this.latest_index].start_time && (!this.last_seek_back_point || this.last_seek_back_point == this._last_seek_back_point || this.last_seek_back_point > QUIZES[this.latest_index].start_time)) {
                        this._last_seek_back_point = this.last_seek_back_point;
                        return
                    }
                    if (this.last_seek_back_point) this._last_seek_back_point = this.last_seek_back_point
                }
                this.stopListener();
                if (player.pausemode.active) {}
                this.addExclusion(index);
                this.latest_index = index;
                player.quiz.showQuestion();
                if (!show_when_piece_time) {
                    video_api.currentTime(QUIZES[index].start_time);
                    player.subs.updateCurrentPiece();
                    if (player.subs.sub_ended) setTimeout('$(player.subs.element).removeClass("none")', 100);
                    else $(player.subs.element).removeClass("lang-en-hidden lang-ru-hidden")
                }
            }
        }
    },
    showQuestion: function() {
        video_api.pause();
        this.state = "question";
        this.update();
        $(this.wrap).show();
        $("#vid-subs").css("display", "block")
    },
    showSuccess: function() {
        video_api.pause();
        this.state = "success";
        this.update();
        $(this.wrap).show()
    },
    showWrong: function() {
        video_api.pause();
        this.state = "wrong";
        this.update();
        $(this.wrap).show()
    },
    resetOptions: function() {
        this.current = null;
        this.current_index = null;
        this.answer = null;
        this.state = null;
        this.html = "";
        this.next_action = null
    },
    hide: function() {
        $(player.quiz.wrap).removeClass("success question wrong").hide().empty();
        player.subs.updateLanguages();
        if (player.quiz.next_action !== null) {
            eval(player.quiz.next_action);
            player.quiz.next_action = null
        } else {
            player.pausemode.escape();
            video_api.play()
        }
        if (player.subs.sub_ended) $(player.subs.element).addClass("none");
        player.quiz.resetOptions();
        player.quiz.startListener()
    },
    update: function() {
        var html = this.generateHTML();
        if (html == this.html) return;
        this.html = html;
        this.updateHTML();
        var scroll_area = $(".scroll-area", this.wrap)[0];
        setTimeout(function() {
            if ($(player.subs.element).is(":visible")) scroll_area.style.maxHeight = $(video_api.el).height() - $(player.subs.element).height() - 100 + "px"
        }, 0);
        new Scrollbar($(".scroll-area", this.wrap)[0], "videoquiz_scrollbar_" + this.state, false)
    },
    generateHTML: function(quiz_data) {
        quiz_data = quiz_data || this.current;
        var html = "";
        switch (this.state) {
            case "question":
                html += '<form id=quiz_form class=variants_form onsubmit="player.quiz.submit(); return false;">' + "<div class=scroll-wrap>" + "<div class=scroll-area>" + "<p class=question>" + quiz_data.question + "</p>" + "<ul class=variants>";
                quiz_data.variants.shuffle();
                for (var i = 0; i < quiz_data.variants.length; i++) {
                    html += "<li><label><input type=radio class=ui-radio name=quiz_answer value=" + quiz_data.variants[i].index + ' onchange="player.quiz.answer=' + quiz_data.variants[i].index + '"> ' + quiz_data.variants[i].text + "</label></li>"
                }
                html += "</ul>" + "</div>" + "</div>" + "<p class=buttons>" + '<button type=submit class="submit ui-button ui-button-green">Ответить</button>' + "</p>" + "</form>";
                break;
            case "success":
                html += "<div class=scroll-wrap>" + "<div class=scroll-area>" + "<p class=question>" + quiz_data.question + "</p>" + "<ul class=variants>";
                for (var i = 0; i < quiz_data.variants.length; i++) {
                    html += "<li" + (quiz_data.variants[i].index == 0 ? " class=correct" : "") + ">- " + quiz_data.variants[i].text + "</li>"
                }
                html += "</ul>" + "<h3 class=title>Ваш ответ правильный!</h3>" + "<p class=explanation>" + quiz_data.explanation + "</p>" + "</div>" + "</div>" + "<p class=buttons>" + '<button class="skip ui-button" onclick="player.quiz.skip()">Продолжить просмотр</button>' + "</p>";
                break;
            case "wrong":
                html += "<div class=scroll-wrap>" + "<div class=scroll-area>" + "<p class=question>" + quiz_data.question + "</p>" + "<ul class=variants>";
                for (var i = 0; i < quiz_data.variants.length; i++) {
                    html += "<li" + (quiz_data.variants[i].index == 0 ? " class=correct" : quiz_data.variants[i].index == player.quiz.answer ? " class=wrong" : "") + ">- " + quiz_data.variants[i].text + "</li>"
                }
                html += "</ul>" + "<h3 class=title>Вы ответили неверно</h3>" + "<p class=explanation>" + quiz_data.explanation + "</p>" + "</div>" + "</div>" + "<p class=buttons>" + '<button class="skip ui-button" onclick="player.quiz.skip()">Продолжить просмотр</button>' + "</p>";
                break
        }
        html += '<div class=close onclick="player.quiz.hide()"></div>';
        return html
    },
    updateHTML: function() {
       // $(this.wrap).removeClass("success question wrong").addClass(this.state).html(this.html).ui();
        $(".close", this.wrap).html(svg_icons.close.cloneNode(true))
    },
    setCurrent: function(index) {
        this.current_index = index;
        this.current = this.getDataFormated(QUIZES[index])
    },
    updateCurrent: function() {
        for (var i = 0; i < QUIZES.length; i++) {
            if (video_api.currentTime() >= QUIZES[i].start_time && video_api.currentTime() <= QUIZES[i].start_time - 0 + .5) {
                this.setCurrent(i);
                return
            }
        }
        this.current_index = null;
        this.current = null
    },
    getByText: function(text) {
        var index = this.getIndexByText(text);
        return QUIZES[index] || null
    },
    getIndexByText: function(text) {
        for (var i = 0; i < QUIZES.length; i++) {
            if (QUIZES[i].keyword == this.formatString(text)) {
                return i
            }
        }
        return null
    },
    getDataFormated: function(quiz_data) {
        quiz_data = $.extend({}, quiz_data || this.current);
        for (var i = 0; i < quiz_data.variants.length; i++) {
            if (typeof quiz_data.variants[i] == "object") break;
            var text = quiz_data.variants[i];
            quiz_data.variants[i] = {
                text: text,
                index: i
            }
        }
        return quiz_data
    },
    formatString: function(str) {
        str = str.toLowerCase().replace(/[^a-z0-9]+/g, " ").replace(/[\s]+/g, " ");
        str = $.trim(str).replace(/ /g, "_");
        return str
    },
    submit: function() {
        var result = this.validate();
        if (result === null) {
            return false
        } else if (!result) {
            this.showWrong()
        } else {
            this.showSuccess()
        }
    },
    skip: function() {
        this.hide()
    },
    isAvailable: function(index) {
        return $.inArray(index, this.exclusions) == -1 || user.can_editposts
    },
    addExclusion: function(index) {
        index = index || this.current_index;
        if (this.isAvailable(index)) {
            this.exclusions.push(index)
        }
    },
    removeExclusion: function(index) {
        if (index < 0) return;
        this.exclusions.splice($.inArray(index, this.exclusions), 1)
    },
    validate: function() {
        if (this.answer === null) return null;
        return this.answer === 0
    },
    listener: function() {
        if (!player.settings.getOption("quizes") || player.pausemode.active) return;
        if (player.quiz.last_time > this.currentTime()) player.quiz.last_seek_back_point = this.currentTime();
        player.quiz.last_time = this.currentTime();
        player.quiz.show()
    },
    startListener: function() {
        video_api.on("timeupdate", this.listener)
    },
    stopListener: function() {
        video_api.off("timeupdate", this.listener)
    }
};
player.playFromTime = function(time) {
    console.log(['playFromTime', time])
    if(0) {
        video_api.play();
    }else{
        console.log('autoplay  off')
    }
    video_api.currentTime(time);
    $(player.subs.element).show();
    player.pausemode.escape();
    $("#vid-prev-subs").hide();
   if(0){
       if (time > 5) puzzleNotification("Возобновление просмотра", "", "Возобновление просмотра", 0, 2e3)

   }else{
       console.log('notif  off')
   }

};
player.playPiece = function(start, finish, callback, video_element) {
    video_element = video_element || video_html5_api;
    if (finish > video_element.duration) return;
    if ($.isFunction(callback)) {
        $(video_element).on("pause.playPiece", function(e) {
            callback(e);
            $(video_element).off("pause.playPiece")
        })
    } else if (typeof callback == "object") {
        $(video_element).on(callback)
    }
    if (player.playPiece.timer) {
        clearInterval(player.playPiece.timer)
    }
    if (video_element != video_html5_api) {
        video_api.pause()
    }
    if (!video_element.buffered || video_element.buffered.length == 0) {
        video_element.play();
        setTimeout(function() {
            player.playPiece(start, finish, callback, video_element)
        }, 250);
        return
    }
    video_element.play();
    video_element.currentTime(start);
    player.playPiece.timer = setInterval("player.playPiece.stopPlaying()", 10);
    player.playPiece.stopPlaying = function() {
        if (video_element.currentTime() >= finish) {
            video_element.pause();
            video_element.currentTime(finish);
            clearInterval(player.playPiece.timer)
        }
    }
};
player.playPieceOnBackground = function(index, callback) {
    $(this).off("pause.playPieceBg");
    player.background_video && player.background_video.remove();
    player.background_video = document.createElement("video");
    if (player.background_video.src != video_api.currentSrc()) {
        player.background_video.src = video_api.currentSrc()
    }
    player.playPiece(SUBTITLES[index].start, SUBTITLES[index].finish, callback, player.background_video)
};
player.settings_controls = {
    element: null,
    visible: false,
    names: "autopause quizes explanations explanations_auto prev_piece translator scenario".split(" "),
    init: function() {
        this.element = document.getElementById("vid-settings-controls");
        var $elements = $("[name]", this.element);
        $elements.change(function() {
            if ($(this).hasClass("disabled")) return;
            player.settings.setOption(this.name, this.type == "checkbox" ? this.checked ? "on" : "off" : this.value);
            player.settings_controls.applyChanges(this.name);
            if (!this.checked) {
                $(this).parent().addClass("inactive")
            } else {
                $(this).parent().removeClass("inactive")
            }
        });
        setTimeout(function() {
            $elements.each(function() {
                var value = player.settings.getOption(this.name);
                if (this.type == "checkbox") {
                    $(this).prop("checked", value)
                } else {
                    $("[name=" + this.name + "][value='" + value + "']").prop("checked", true);
                    $("[name=" + this.name + "] + .ui-replacement").removeClass("active");
                    $("[name=" + this.name + "]:checked + .ui-replacement").addClass("active")
                }
                if (!player.settings.getOption(this.name)) {
                    $(this).parent().addClass("inactive")
                } else {
                    $(this).parent().removeClass("inactive")
                }
            })
        }, 0);
        this.update();
        //$(this.element).ui()
    },
    update: function() {
        for (var i = 0; i < this.names.length; i++) {
            var name = this.names[i];
            var value = player.settings.getOption(name);
            var $input = $("[name=" + name + "]", this.element);
            if ($input.is(":radio")) {
                $input.filter("[value='" + value + "']").uiCheck()
            } else if ($input.is(":checkbox")) {
               // $input.uiCheck(value == "on" || value === true)
            } else {
                $input.val(value)
            }
        }
    },
    applyChanges: function(name) {
        var value = player.settings.getOption(name);
        switch (name) {
            case "prev_piece":
                $("#vid-prev-subs").remove();
                break
        }
    },
    show: function() {
        this.visible = true;
        $("#video .vjs-settings-control").addClass("active")
    },
    close: function() {
        this.visible = false;
        $("#video .vjs-settings-control").removeClass("active")
    },
    toggle: function() {
        if (this.visible) this.close();
        else this.show()
    }
};
if (window.video) {
    player.setVolume = video.setVolume;
    player.toggleEnSubs = video.toggleEnSubs;
    player.toggleRuSubs = video.toggleRuSubs
}
player.hotkeysPopup = {
    visible: false,
    show: function() {
        this.visible = true;
        $("a.hotkeys-toggle", video).text("Скрыть горячие клавиши");
        $("#vid-hotkeys-popup").show();
        player.settings_controls.close();
        if (browser.webkit) {
            setTimeout(function() {
                $("#vid-hotkeys-popup .arrows svg").css("padding", 0)
            }, 0)
        }
    },
    close: function() {
        this.visible = false;
        $("a.hotkeys-toggle", video).text("Показать горячие клавиши");
        $("#vid-hotkeys-popup").hide()
    },
    toggle: function() {
        if (this.visible) this.close();
        else this.show()
    }
};
player.pausemode = {
    active: false,
    init: function() {
        video_api.on("pause_manual", function() {
            player.pausemode.enter();
            player.subslist.scrollPosition = null
        });
        video_api.on("play_manual", this.escape);
        video_api.on("timeupdate", function() {
            if (!video_api.paused()) {
                $("#vid-subs, #vid-prev-subs").css("display", "block")
            }
        })
    },
    enter: function() {
        if (player.settings.getOption("scenario")) {
            setTimeout('$("#vid-subs, #vid-prev-subs").hide()', 50);
            $("#vid-pause-mode").show()
        } else {
            $("#vid-pause-mode").hide()
        }
        player.subslist.show();
        player.explanation.hide();
        player.pausemode.active = true;
        var i = 0,
            interval = setInterval(function() {
                player.subslist.scrollbar.setPosition(9e5);
                if (++i == 4) clearInterval(interval)
            }, 10)
    },
    escape: function() {
        $("#vid-subs, #vid-prev-subs").css("display", "block");
        setTimeout('$("#vid-pause-mode").hide()', 25);
        player.explanation.hide();
        player.pausemode.active = false;
        audio.pause();
        clearInterval(player.subslist.playPieceAudio.interval)
    }
};
player.jumpToPiece = function(piece_index, highlight_word) {
    function _setTime(time) {
        if (piece_index == player.subs.current_index + 1 && SUBTITLES[player.subs.current_index].finish > SUBTITLES[piece_index].start) {
            time = SUBTITLES[player.subs.current_index].finish - 0 + 1e-4
        }
        try {
            if (time != video_api.currentTime()) video_api.currentTime(time)
        } catch (e) {
            setTimeout(function() {
                _setTime(time)
            }, 0)
        }
    }
    if (SUBTITLES[piece_index]) _setTime(SUBTITLES[piece_index].start);
    if (highlight_word) {
        var data = player.subslist.highlight = player.subs.highlight = {
            piece_index: piece_index,
            word: highlight_word.toLowerCase()
        };
        if (player.subs.current_index == piece_index) {
            var el = player.pausemode.active ? player.subslist.sub_current : player.subs.element;
            player.highlightWord(el, data)
        }
    }
};
player.highlightWord = function(el, highlight_data) {
    if (!el || !highlight_data) return;
    var h = el.getElementsByClassName("highlighted")[0];
    if (highlight_data.piece_index == player.subs.current_index && (!h || h.innerHTML != highlight_data.word)) {
        $(h).removeClass("highlighted");
        var words = el.getElementsByClassName("word-wrapper"),
            l = words.length;
        while (l--) {
            if (words[l].innerHTML.toLowerCase() == highlight_data.word) {
                $(words[l]).addClass("highlighted")
            }
        }
    }
};
player.popstateListener = function() {
    function jump() {
        if (/[#&](?:phrase|piece)=\d/.test(location.hash)) {
            var piece_index = location.hash.match(/(?:phrase|piece)=(\d+)/)[1];
            player.jumpToPiece(piece_index - 1)
        }
    }
    window.location.hash && jump();
    $(window).on("popstate", jump)
};
player.onSeekStart = function() {
    audio.pause && audio.pause();
    player.subs.next_piece_allowed = true
};
player.onSeekEnd = function() {
    if (player.subs.playPieceAudio.active) {
        video_api.play();
        player.subs.playPieceAudio.active = false
    }
};
audio.playWord = function(word) {
    this.playSound(STATIC_HOME + "/mp3/words/" + word + ".mp3")
};
audio.playPiece = function(index, callback) {
    if (index > SUBTITLES.length) return;
    this.playSound(this.getPieceURL(index));
    if ($.isFunction(callback)) {
        audio.addEventListener("ended.playPiece", function(e) {
            callback(e);
            audio.removeEventListener("ended.playPiece")
        })
    } else if (typeof callback == "object") {
        audio.addEventListener(callback)
    }
};
audio.getPieceURL = function(index) {
    if (!audio_pieces_available) return false;
    return STATIC_HOME + video_path + "/phrases_" + this.type + "/" + (index + 1) + "." + this.type
};
var episodesList = {
    episodes: {},
    current: {
        e: 0,
        s: 0,
        episode: {},
        full_path: ""
    },
    setCurrent: function(season, episode) {
        if (typeof this.episodes[season] !== "undefined" && typeof this.episodes[season][episode] !== "undefined") {
            this.current.e = episode;
            this.current.s = season;
            this.current.episode = this.episodes[season][episode]
        }
    },
    getNextEpisode: function() {
        if (typeof this.episodes[this.current.s] !== "undefined" && this.episodes[this.current.s][this.current.e + 1]) {
            var episode = this.episodes[this.current.s][this.current.e + 1];
            return {
                e: episode.episode,
                s: this.current.s,
                episode: episode
            }
        }
        return null
    },
    next: function() {
        var next_episode = this.getNextEpisode(),
            $box = $("#fullMovieLight");
        video_api.pause();
        if (next_episode !== null) {
            this.setCurrent(this.current.s, next_episode.e);
            $("video").get(0).src = this.current.episode.full_path;
            if (!player.inited) player.init();
            var callback = function(response) {
                var $container = $(".b-episode_media_container");
                window.SUBTITLES = response.subtitles === null || response.subtitles.length === 0 ? [{}] : response.subtitles;
                window.video_path = response.video_path;
                player.explanation.dir = window.video_path && STATIC_HOME + video_path.replace("/series/video", "/series/explanations");
                $container.removeClass("b-episode_without-rus-subs");
                window.post_id = episodesList.current.episode.post_id;
                if (typeof window.movies_light !== "undefined") {
                    location.hash = episodesList.current.e
                }
                player.subs.current_index = 0;
                player.subslist.sub_current = null;
                vjs("video").ready(function() {
                    $(".vjs-loading-spinner").html("");
                    audio.types = ["mp3"];
                    audio.init();
                    $("#vid-subs").html("");
                    player.subslist.init();
                    $box.find(".series-light__popup-content").removeClass("loading");
                    $("body").removeClass("movie-light-loading");
                    var self = this;
                    window.setTimeout(function() {
                        self.play()
                    }, 10)
                })
            };
            setTimeout(function() {
                var $subs = $("#vid-subslist-subs-container");
                if ($subs.length) $subs.html("");
                $.post("/", {
                    ajax_action: "ajax_series_getSubtitles",
                    post_id: episodesList.current.episode.post_id
                }, callback, "json")
            }, 100)
        } else {
            if (typeof window.movies_light !== "undefined") window.fullMovieLight.close()
        }
    }
};
$(function() {
    var $body = $("body");
    $body.on("click", "#cancel_next_episode", function() {
        $(".puzzle-notification").fadeOut(400);
        clearInterval(window.next_episode_countdown)
    });
    $body.on("mousemove", function() {
        player.show_hide_control_bar()
    });
    $("#vid-subslist-subs-container").click(function(e) {
        if (e.target !== this) return;
        video_api.controlBar.playToggle.onClick()
    });
    $("#vid-subs").mouseenter(function() {
        if (!player.settings.getOption("paused_by_hover") || player.paused_by_subs_hover || video_api.paused()) return;
        player.paused_by_subs_hover = true;
        video_api.pause()
    }).mouseleave(function() {
        // fix
        // if (Balloon.box !== null && Balloon.box.isOpen || player.explanation.active) {
        if (player.explanation.active) {
            player.paused_by_subs_hover = false;
            return
        } else if (!player.paused_by_subs_hover) return;
        player.paused_by_subs_hover = false;
        video_api.play()
    })
});