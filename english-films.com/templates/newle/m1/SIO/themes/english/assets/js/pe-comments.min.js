var isFeed = false;
if (/comment\-feed/g.test(location.href)) {
    isFeed = true
}

function declOfNum(number, titles) {
    cases = [2, 0, 1, 1, 1, 2];
    return titles[number % 100 > 4 && number % 100 < 20 ? 2 : cases[number % 10 < 5 ? number % 10 : 5]]
}

function _getMeTreeComment(id_comment, $tree, $self, hash) {
    var req = {
        post_id: 1,
        ajax_action: "ajax_pe_get_tree_comment_feed",
        is_best: true,
        comment_id: id_comment
    };
    $.post(location.href, req, function(res) {
        if (res) {
            $tree.html("<ul>" + res + "</ul>").parent().slideDown(300);
            if (hash !== undefined) {
                $("html, body").animate({
                    scrollTop: $(hash).offset().top - 100
                }, 500)
            } else if ($self !== undefined) {
                $self.closest("li").hide()
            }
        } else {
            alert("Не удалось загрузить комментарии!");
            if ($self !== undefined) $self.click()
        }
    }, "html")
}
$(document).ready(function() {
    var hash = window.location.hash;
    if (hash.length) {
        $(".puzzle-comments__list").show();
        if (/pe\-comment\_[0-9]+$/g.test(hash)) {
            if ($(hash).length == 0) {
                var id_comment = hash.split("pe-comment_")[1],
                    $tree = $("#comment_who_hidden_deep");
                _getMeTreeComment(id_comment, $tree, undefined, hash)
            }
        }
    }
    $(".puzzle-comments__title_js_click").on("click", function() {
        var $wrap = $(this).parents(".puzzle-comments");
        if ($wrap.hasClass("is-open")) {
            $wrap.removeClass("is-open");
            $wrap.find(".puzzle-comments__list").slideUp(400)
        } else {
            $wrap.addClass("is-open");
            $wrap.find(".puzzle-comments__list").slideDown(400)
        }
    });
    var $body = $("body");
    $body.on("click", ".j-delete_all_comment_by_user", function() {
        if (confirm("Вы точно хотите удалить все комментарии этого юзера?")) {
            $.post("/api2/comments/delete_comments_by_user", {
                user_id: $(this).attr("data-user_id")
            }, function(res) {
                if (res.success === true) {
                    if (confirm("Все комментарии удалены. Перезагрузить страницу?")) location.reload()
                } else alert(res.response)
            }, "json")
        }
    });
    $body.on("click", ".puzzle-comments__show_tree", function() {
        var $self = $(this),
            id_comment = $self.closest("li.puzzle-comments__item").attr("data-id"),
            $tree = $("#tree_best_" + id_comment);
        if ($tree.html() !== undefined && $tree.html() != "") {
            $tree.parent().slideDown(300);
            $self.closest("li").hide()
        } else {
            var req = {
                pe_type: "pe",
                post_id: 0,
                phrase_index: 0,
                id_comment: id_comment,
                make_html: true,
                is_best_comment: true
            };
            $.post("/api2/comments/get_comments", req, function(res) {
                if (res.success === true) {
                    $tree.html("<ul class='puzzle-comments__list puzzle-comments__ul'>" + res.response.html + "<li><p>&nbsp;</p></li></ul>").parent().slideDown(300);
                    $self.closest("li").hide()
                } else {
                    alert("Не удалось загрузить комментарии!")
                }
            }, "json")
        }
    }).on("click", ".icon_close_tree_div", function() {
        var $self = $(this),
            id_comment = $self.attr("data-id"),
            $tree = $("#tree_best_" + id_comment);
        $tree.parent().slideUp(300);
        $("#bestCommentsForm #pe-comment_" + id_comment).show()
    })
});
$(document).on("click", ".b-add_comment__send_btn", function(e) {
    $(".puzzle-comment_form_error").empty().hide();
    var myThis = $(this),
        type_post = myThis.attr("data-type"),
        is_reply = myThis.attr("data-is_reply"),
        is_feed = myThis.attr("data-comment_feed"),
        $otherData = $(".j-teacher-second__comments"),
        isWorkEnd = $otherData.attr("data-work"),
        pe_type = $otherData.attr("data-type"),
        $id = $otherData.attr("data-item-id"),
        is_complete_task = $otherData.attr("data-progress"),
        pieceIndex = myThis.closest(".j-react__phrase-comment-list").data("piece_index");
    var notPhrase = myThis.attr("data-not_phrase");
    if (is_reply == true) notPhrase = "false";
    if (typeof pe_type === "undefined") pe_type = "pe";
    if (typeof $id === "undefined") $id = myThis.closest(".TaskBlock").attr("data-post_id");
    var req = {
        ajax_action: "ajax_pe_publish_comment",
        word: $("#word").val(),
        parent_id: myThis.attr("data-parent-id"),
        content: myThis.closest(".row").find(".puzzle-input").val(),
        type: pe_type,
        id: $id,
        notPhrase: notPhrase,
        type_post: type_post,
        is_complete_task: is_complete_task
    };
    if (typeof myThis.attr("data-trusted_user_answer") !== "undefined") req.trusted_user_answer = true;
    else if (typeof myThis.attr("data-trusted_user_answer_admin") !== "undefined") req.trusted_user_answer_admin = true;
    $.post(HOME, req, function(response) {
        var temps = response.phrase;
        if (response.error) $(".puzzle-comment_form_error").html(response.error).show();
        else {
            document.dispatchEvent(new CustomEvent("pe.comments.onCreated", {
                detail: {
                    pieceIndex: +pieceIndex
                }
            }));
            $(".puzzle-input").val("");
            if (isWorkEnd == "true" && notPhrase != "false") {
                $("#endWorkComment").html("<h4 style='text-align: center;'>Спасибо за Ваш отзыв!</h4><br>");
                return false
            }
            if (is_feed == "true") {
                get_one_comment_for_feed(response.id, response.parentId, notPhrase);
                return false
            }
            if (notPhrase == "false" && response.getComments != "") {
                var $ul = $("li[data-pos=" + response.phrase + "] .j-phrase_comments_container ul.comments");
                if (typeof $ul.html() === "undefined") {
                    $ul = $(".TaskBlock[data-post_id=" + $id + "] ul.comments");
                    if (typeof $ul.html() === "undefined") $ul = $(".j-react__phrase-comment-list[data-piece_index=" + response.phrase + "] ul.comments")
                }
                $ul.parent().find("ul:first").html(response.getComments);
                return false
            }
            if (myThis.attr("data-reply_button") == "true") $(".remove-comment__reply").click();
            if (myThis.attr("data-parent-id") > 0) myThis.closest("div.puzzle-comment__form").remove();
            if (type_post == "podcast") notPhrase = false;
            if (["mt_atom", "podcast"].indexOf(pe_type) !== -1 || temps == 0) pe_load_comments(pe_type, $id, response.id, notPhrase, 1);
            else {
                if (notPhrase != false) pe_load_comments(pe_type, $id, response.id, "true", 1)
            }
            $("#showMoreCommentsButton").show();
            var $commentsNew = $("#commentsNew");
            if ($commentsNew.hasClass("hidden")) $commentsNew.removeClass("hidden")
        }
        var $showMeOtherComments = $(".showMeOtherComments");
        if ($showMeOtherComments.length > 0) $showMeOtherComments.removeClass("hidden")
    }, "json")
}).on("click", ".puzzle-comments__reply", function(e) {
    var is_feed = /comment-feed/g.test(location.href);
    $(".remove-comment__reply").html("Ответить").removeClass("remove-comment__reply").addClass("puzzle-comments__reply");
    $(this).removeClass("puzzle-comments__reply").addClass("remove-comment__reply").html("Не отвечать");
    var $parent = $(this).closest("li").attr("data-id"),
        $isReplay = $(this).attr("data-is_reply");
    var type_posts;
    if (is_feed) {
        var $attr = $(".attr_for_comment_" + $parent);
        var $item_id = $attr.attr("data-item-id");
        type_posts = $attr.attr("data-type_post")
    } else {
        var $otherData = $(".j-teacher-second__comments");
        $item_id = $otherData.attr("data-item-id");
        type_posts = $otherData.attr("data-type_posts");
        if (typeof type_posts === "undefined") {
            var $btn = $(".b-add_comment__send_btn");
            type_posts = $btn.parent().find("button").attr("data-type");
            if (typeof type_posts === "undefined") {
                type_posts = $btn.attr("data-type");
                if (typeof type_posts === "undefined") type_posts = "notType"
            }
        }
    }
    var req = {
        ajax_action: "ajax_pe_reply_comment",
        comment_item_id: $item_id,
        comment_parent: $parent,
        isReplay: $isReplay
    };
    var self = $(this);
    $.post(HOME, req, function(response) {
        self.closest("article").find(".puzzle-comment__form").remove();
        $(".replyFormDelete").remove();
        var $form = self.closest("article").append(response.form).find(".puzzle-comment__form");
        $form.addClass("replyFormDelete");
        if (is_feed) {
            var $formSelf = $form.find("button.b-add_comment__send_btn");
            if (/isTrustedUser\=yes|needHelp\=yes/g.test(location.href)) $formSelf.attr("data-trusted_user_answer" + (!isTrustedUser ? "_admin" : ""), true);
            $formSelf.attr("data-comment_feed", true)
        }
        $form.show("400", function() {
            $form.find("textarea").focus()
        });
        if (type_posts == "notType") $form.find("button.b-add_comment__send_btn").attr("data-type", "video");
        $form.find("button.b-add_comment__send_btn").attr("data-reply_button", true)
    }, "json")
}).on("click", ".remove-comment__reply", function(e) {
    $(this).removeClass("remove-comment__reply").addClass("puzzle-comments__reply").html("Ответить");
    $(".replyFormDelete").parent().remove()
}).on("click", ".puzzle-comments__edit_btn", function(e) {
    $id = $(this).data("id");
    $text = $(this).parent().find("textarea").val();
    var req = {
        ajax_action: "ajax_pe_update_comment",
        id: $id,
        comment_content: $text
    };
    var isReturnCommentRoAdmin = $("#edit_old_comment_return" + $id).attr("data-isReturnToFeed");
    if (isReturnCommentRoAdmin !== undefined) req.isReturnCommentRoAdmin = true;
    else {
        isReturnCommentRoAdmin = $("#edit_old_comment" + $id).attr("data-isReturnToFeed");
        if (isReturnCommentRoAdmin !== undefined) req.isReturnCommentRoAdmin = true
    }
    $.ajax({
        url: HOME,
        context: this,
        success: function(response) {
            if (response.success) {
                if (isReturnCommentRoAdmin !== undefined) {
                    $("#edit-comment-form").closest("li.phrase_wrap").remove();
                    var countComment = $("#commentCountMyRetrunAnswer").html();
                    if (countComment !== undefined) {
                        countComment = parseInt(countComment) - 1;
                        countComment = countComment <= 0 ? 0 : countComment;
                        $("#commentCountMyRetrunAnswer").html(countComment)
                    }
                    return false
                }
                if ($("#edit_old_comment" + $id).html() !== undefined) {
                    if (response.success == 2) $("#comment-" + $id + " .notApproved").html("Ваш комментарий ожидает одобрения модератора!<br>");
                    else $("#comment-" + $id + " .notApproved").html("");
                    $(this).closest(".comment-content").html("<p>" + $text.replace(/\n/g, "<br>") + "</p>");
                    $(this).closest(".puzzle-comments__edit").remove()
                } else {
                    if (response.success == 2) $("#pe-comment_" + $id + " .notApproved").html("Ваш комментарий ожидает одобрения модератора!<br>");
                    else $("#pe-comment_" + $id + " .notApproved").html("");
                    $(this).closest(".puzzle-comment__text").empty().html($text.replace(/\n/g, "<br>"))
                }
            }
        },
        data: req,
        type: "post",
        dataType: "json"
    })
}).on("click", ".showMeOtherComments", function(e) {
    var myThis = $(this);
    var lastText = myThis.html();
    $lastId = myThis.attr("data-last_id");
    myThis.html("<span>Загружаю...</span>");
    var isFeedComment = myThis.attr("data-is_feed_comment");
    var whatKindComment = myThis.attr("data-isPhrase");
    if (whatKindComment === undefined) whatKindComment = "notFound";
    var action = isFeedComment == "true" ? "notFound" : "ajax_pe_get_hundred_comment";
    var url = isFeedComment == "true" ? deleteParamFromUrl("page") : HOME;
    $.ajax({
        url: url,
        success: function(response) {
            myThis.attr("data-last_id", response.lastId);
            if (response.html != "" && response.html !== undefined) {
                if (isFeedComment == "true") {
                    myThis.html(lastText);
                    $("#phrases").append(response.html);
                    var $inputPagination = $("#pageCommentFeed");
                    var numPage = parseInt($inputPagination.val());
                    if (isNaN(numPage) || numPage <= 0) numPage = 0;
                    numPage++;
                    var allPageFeed = parseInt($("#allPageForFeed").html().replace(" ", ""));
                    if (isNaN(allPageFeed) || allPageFeed <= 0) allPageFeed = 0;
                    if (numPage >= allPageFeed) {
                        $(".showMeOtherComments").hide();
                        if (numPage == allPageFeed) $(".pageCommentFeed").val(numPage)
                    } else $(".pageCommentFeed").val(numPage);
                    $(".puzzle-comments__reply").attr("onclick", "blockComment(this); return false;")
                } else {
                    $("#commentsNew ul.puzzle-comments__list").append(response.html);
                    if (response.countLeft >= 100) $(".showMeOtherComments > span").html("Показать еще <span>100</span> комментариев");
                    else if (response.countLeft > 0) $(".showMeOtherComments > span").html("Показать оставшиеся <span>" + response.countLeft + "</span> " + declOfNum(response.countLeft, ["комментарий", "комментария", "комментариев"]));
                    initPopupForDate()
                }
            } else {
                if (isFeedComment == "true" && response.error !== undefined) alert(response.error);
                myThis.html(lastText)
            }
            if (response.lastId == 0 || response.html == "") $("#showMoreCommentsButton").hide()
        },
        error: function() {
            myThis.html(lastText)
        },
        data: {
            ajax_action: action,
            id: $lastId,
            whatKindComment: whatKindComment
        },
        type: "post",
        dataType: "json"
    })
}).on("keydown", ".comment-phrase-index-input-move", function(e) {
    if (e.which == 13) {
        var $commentId = parseInt($(this).data("comment_id"));
        var $newParent = parseInt($(this).val());
        var $selfInput = $(this);
        if (isNaN($commentId) || $commentId <= 0) {
            alert("ID данного комментария указан не верно!");
            return false
        } else if (isNaN($newParent) || $newParent < 0) {
            alert("ID комментария, к которому вы хотите перенести этот комментарий, указан не верно!");
            return false
        }
        $.ajax({
            url: HOME,
            success: function(response) {
                alert(response.move);
                if (/comment\-feed/g.test(location.href)) {
                    $selfInput = $selfInput.closest(".allCommentTreeAddComment");
                    $(".hideOneCommentForButton li#comment-" + $commentId + ", .hideOneCommentForButton li#pe-comment_" + $commentId).remove();
                    $(".allCommentTreeAddComment li#comment-" + $commentId + ", .allCommentTreeAddComment li#pe-comment_" + $commentId).remove()
                }
                if (response.id_post !== undefined && response.phrase !== undefined && response.id_post != 9999) {
                    var req = {
                        ajax_action: "ajax_get_phrase_comments",
                        post_id: response.id_post,
                        comment_phrase: response.phrase
                    };
                    $.post(location.href, req, function(res) {
                        if (res) {
                            if (/comment\-feed/g.test(location.href)) {
                                $selfInput.find("ul:first").html(res)
                            } else {
                                var $ul = $("li[data-pos=" + response.phrase + "] .j-phrase_comments_container ul.comments");
                                if ($ul.html() === undefined) {
                                    $ul = $(".TaskBlock[data-post_id=" + $id + "] ul.comments")
                                }
                                var $parent = $ul.parent();
                                $parent.find("ul:first").html(res)
                            }
                        }
                    }, "html")
                }
            },
            data: {
                ajax_action: "ajax_pe_move_comment",
                comment_id: $commentId,
                new_parent: $newParent
            },
            type: "post",
            dataType: "json"
        })
    }
}).on("click", ".puzzle-comments__link-favorite_js_click", function() {
    var myThis = $(this),
        $id = myThis.closest("li").attr("data-id"),
        $textSpan = myThis.find(".puzzle-comments__link-favorite-text"),
        whatAction = myThis.attr("data-action");
    whatAction = ["1", "2"].indexOf(whatAction) !== -1 ? whatAction : 1;
    const data = {
        ajax_action: "ajax_pe_favorite_comment",
        comment_id: $id,
        whatAction: whatAction
    };
    $.post(HOME, data, function(res) {
        if (res.mes == "true") {
            myThis.attr("data-action", whatAction == 1 ? 2 : 1);
            if (whatAction == 1) {
                myThis.addClass("is-active");
                $textSpan.text(localizeGetText({
                    l: "delete_from_favorite",
                    v: "Удалить из избранного",
                    n: "comments",
                    t: "first"
                }));
                if (res.isShowPopUp) {
                    new jBox("Modal", {
                        content: res.popup,
                        addClass: "puzzle-modal",
                        closeButton: "overlay",
                        blockScroll: true,
                        height: 374,
                        width: 360
                    }).open()
                }
            } else {
                myThis.removeClass("is-active");
                $textSpan.text(localizeGetText({
                    l: "insert_to_favorite",
                    v: "В избранное",
                    n: "comments",
                    t: "first"
                }))
            }
        } else alert(res.mes)
    }, "json")
}).on("click", ".j-subcribe_comments_box", function() {
    var $type = $(".j-teacher-second__comments").attr("data-type");
    var $idPost = parseInt($(".j-teacher-second__comments").attr("data-item-id"));
    if (isNaN($idPost) || $idPost <= 0) {
        alert("Мы не можем использовать испорченные данные!");
        return false
    }
    var subscribe = 1;
    if ($(this).hasClass("is-active")) subscribe = 2;
    var $self = $(this);
    $.ajax({
        url: HOME,
        success: function(response) {
            if (response.mes == "true") {
                var text = localizeGetText({
                    l: "subscribe_to_comments",
                    v: "подписаться<br>на комментарии",
                    n: "comments",
                    t: "first"
                });
                var func = "removeClass";
                if (subscribe != 2) {
                    text = localizeGetText({
                        l: "youre_subscribed_to_comments",
                        v: "вы подписаны<br>на комментарии",
                        n: "comments",
                        t: "first"
                    });
                    func = "addClass"
                }
                $self[func]("is-active").find(".vocab-test__words__element__main").html(text)
            } else alert(response.mes)
        },
        data: {
            ajax_action: "ajax_pe_subscribers_comment",
            post_id: $idPost,
            subscribe: subscribe,
            type: $type
        },
        type: "post",
        dataType: "json"
    })
}).on("click", ".radio_button_send_email_like", function() {
    var $form = $(this).closest(".puzzleCommentsVote");
    var $id = $form.attr("data-id_comment");
    var $whatAction = parseInt($form.find(".is-checked input[type=radio]").val());
    $.ajax({
        url: HOME,
        success: function(response) {
            if (response.mes == "true") {
                if ($whatAction == 1) $(".likeText_" + $id).text(localizeGetText({
                    l: "you_liked_it",
                    v: "вы проголосовали «За»",
                    t: "first",
                    n: "comments"
                }) + " " + localizeGetText({
                    l: "and_signed",
                    v: "и подписаны",
                    n: "comments"
                }));
                else $(".likeText_" + $id).text(localizeGetText({
                    l: "you_liked_it",
                    v: "вы проголосовали «За»",
                    t: "first",
                    n: "comments"
                }) + " " + localizeGetText({
                    l: "and_not_signed",
                    v: "и не подписаны",
                    n: "comments"
                }))
            } else alert(response.mes)
        },
        data: {
            ajax_action: "ajax_pe_like_comment_options",
            comment_id: $id,
            whatAction: $whatAction
        },
        type: "post",
        dataType: "json"
    });
    $(".jBox-closeButton").click()
}).on("click", ".puzzle-comments__name-answer_js_click", function() {
    var commentId = $(this).data("move-to");
    $("html, body").animate({
        scrollTop: $('.puzzle-comments__item[data-id="' + commentId + '"').offset().top - 50 + "px"
    }, {
        duration: 500
    });
    return false
});

function pe_load_comments(type, id, new_item_id, notPhrase, incDecNumberComment) {
    if (type == "mt_atom") notPhrase = false;
    var req = {
        ajax_action: "ajax_pe_load_comments",
        id: id,
        type: type,
        notPhrase: notPhrase
    };
    $.post(HOME, req, function(response) {
        var numComm = parseInt($(".pe-comments-count").text()),
            numLeftComm = parseInt($(".showMeOtherComments > span > span").text());
        if (incDecNumberComment == 1) {
            numComm = isNaN(numComm) ? 0 : numComm + 1;
            numLeftComm++
        } else if (incDecNumberComment == -1) {
            numComm = isNaN(numComm) || numComm == 0 ? 0 : numComm - 1;
            numLeftComm = numLeftComm == 0 || isNaN(numLeftComm) ? 0 : numLeftComm - 1
        }
        $(".pe-comments-count").text(numComm);
        $(".showMeOtherComments > span > span").text(numLeftComm);
        var $header = $(".puzzle-comments__header");
        response.count ? $header.show() : $header.hide();
        $(".showMeOtherComments").attr("data-last_id", response.lastId);
        $(".puzzle-comments__ul").hide().empty().html(response.list).fadeIn();
        var $offset = typeof new_item_id !== "undefined" ? $("#pe-comment_" + new_item_id) : $(".puzzle-comments__title");
        if (typeof $offset !== "undefined" && $offset.length > 0) {
            $("html, body").animate({
                scrollTop: $offset.offset().top
            }, 50)
        }
    }, "json")
}

function pe_delete_comment(comment_id) {
    var notPhrase = true;
    $type = $(".j-teacher-second__comments").data("type");
    $id = $(".j-teacher-second__comments").data("item-id");
    if (confirm("Подтвердите удаление комментария")) {
        $.post(HOME, {
            ajax_action: "ajax_pe_delete_comment",
            id: comment_id
        }, function(resp) {
            if (resp.success) {
                var $child, $comment = $("#pe-comment_" + comment_id);
                for (var i = 0; i < 30; i++) {
                    $child = $comment.next();
                    if ($child.hasClass("pe-comment-child")) {
                        $child.remove()
                    }
                }
                $comment.remove();
                var numComm = parseInt($(".pe-comments-count").text());
                if (isNaN(numComm) || numComm == 0) numComm = 0;
                else numComm--;
                $(".pe-comments-count").text(numComm);
                if (/comment-feed/.test(location.href)) {
                    $("div#hideOneComment_" + comment_id + " li#pe-comment_" + comment_id).remove()
                }
            } else {
                alert("Невозможно удалить комментарий")
            }
        }, "json")
    }
}

function pe_restore_comment(comment_id) {
    $.post(HOME, {
        ajax_action: "ajax_pe_delete_comment",
        id: comment_id,
        restore: true
    }, function(resp) {
        if (resp.success) {
            $(".delete_link_" + comment_id).attr("style", "");
            $(".restore_link_" + comment_id).remove()
        } else alert("Невозможно восстановить комментарий")
    }, "json")
}

function pe_edit_comment(comment_id, isPhrase, isReturnToFeed) {
    var $comment = $("#pe-comment_" + comment_id);
    var comment_content = $comment.find(".puzzle-comment__text").html();
    $.ajax({
        context: this,
        url: HOME,
        success: function(response) {
            if (response.error == undefined) {
                var $oldHtml;
                if (isPhrase === undefined) {
                    if (isReturnToFeed === true) $oldHtml = "<div class='hidden' id='edit_old_comment_return" + comment_id + "' data-isReturnToFeed='true'>" + comment_content + "</div>";
                    else $oldHtml = "<div class='hidden' id='edit_old_comment_return" + comment_id + "'>" + comment_content + "</div>";
                    $comment.find(".puzzle-comment__text").html(response.form + $oldHtml)
                } else {
                    var oldHtml = $comment.closest("article").find(".comment-content").html();
                    if (isReturnToFeed === true) $oldHtml = "<div class='hidden' id='edit_old_comment" + comment_id + "' data-isReturnToFeed='true'>" + oldHtml + "</div>";
                    else $oldHtml = "<div class='hidden' id='edit_old_comment" + comment_id + "'>" + oldHtml + "</div>";
                    if (oldHtml !== undefined) $comment.closest("article").find(".comment-content").html(response.form + $oldHtml);
                    else {
                        $comment = $("#comment-" + comment_id);
                        oldHtml = $comment.find(".comment-content:first").html();
                        $comment.find(".comment-content:first").html(response.form + $oldHtml)
                    }
                }
            }
        },
        data: {
            ajax_action: "ajax_pe_edit_comment",
            id: comment_id
        },
        type: "post",
        dataType: "json"
    })
}

function pe_approve_comment(comment_id, isPhrase, self) {
    var $self = $(self);
    var type_post = $(".j-teacher-second__comments").data("type_posts");
    if (type_post === undefined) {
        type_post = $(".b-add_comment__send_btn").attr("data-type");
        if (type_post === undefined) type_post = "pe"
    }
    var howApprove = $self.attr("data-approve");
    $self.attr("data-approve", howApprove == 1 ? 2 : 1);
    $.ajax({
        type: "POST",
        url: "/",
        data: {
            ajax_action: "ajax_pe_approve_comment",
            id: comment_id,
            type_post: type_post,
            howApprove: howApprove
        },
        dataType: "json"
    });
    var textDecline = localize({
        l: "reject",
        v: "отвергнуть",
        t: "first"
    });
    var textApprove = localize({
        l: "approve",
        v: "одобрить",
        t: "first"
    });
    if (isPhrase === undefined) {
        if (howApprove == 2) {
            $self.find(".pe-comment-approve").html(textDecline);
            $self.closest("article").addClass("puzzle-comments__item_status_expert");
            $self.closest("article").find(".puzzle-comment__status").text("Комментарий одобрен экспертом Puzzle English").show();
            if (isFeed === true) {
                $self = $self.closest("li.balloon-row").find(".hideOneCommentForButton li#pe-comment_" + comment_id + " .pe_approved_com:first");
                $self.html(textDecline);
                $self.closest("article").addClass("puzzle-comments__item_status_expert");
                $self.closest("article").find(".puzzle-comment__status").text("Комментарий одобрен экспертом Puzzle English").show()
            }
        } else {
            $self.find(".pe-comment-approve").html(textApprove);
            $self.closest("article").removeClass("puzzle-comments__item_status_expert");
            $self.closest("article").find(".puzzle-comment__status").text("").hide();
            if (isFeed !== false) {
                $self = $self.closest("li.balloon-row").find(".hideOneCommentForButton li#pe-comment_" + comment_id + " .pe_approved_com:first");
                $self.html(textApprove);
                $self.closest("article").removeClass("puzzle-comments__item_status_expert");
                $self.closest("article").find(".puzzle-comment__status").text("").hide()
            }
        }
    } else {
        if (howApprove == 2) {
            $self.html(textDecline);
            $self.closest("article").find(".comment-content").prepend('<div class="author-role">Комментарий одобрен экспертом Puzzle English</div>');
            if (isFeed === true) {
                $self = $self.closest("li.balloon-row").find(".hideOneCommentForButton .pe-comment-approve_" + comment_id);
                $self.html(textDecline);
                if ($self.closest("article").find(".comment-content div.author-role").html() === undefined) $self.closest("article").find(".comment-content").prepend('<div class="author-role">Комментарий одобрен экспертом Puzzle English</div>')
            }
        } else {
            $self.html(textApprove);
            $self.closest("article").find(".comment-content div.author-role").remove();
            if (isFeed === true) {
                $self = $self.closest("li.balloon-row").find(".hideOneCommentForButton .pe-comment-approve_" + comment_id);
                $self.html(textApprove);
                $self.closest("article").find(".comment-content div.author-role").remove()
            }
        }
    }
}

    function initPopupForDate() {
    if(0){
        new jBox("Tooltip", {
            animation: "zoomOut",
            addClass: "puzzle-tooltip puzzle-tooltip_style_buble puzzle-tooltip_size_m dictionary-tooltip_mobile-resize puzzle_ta_center",
            attach: $(".puzzle_tooltip_date_jbox"),
            zIndex: 3,
            width: 200,
            getContent: "data-jbox-content",
            adjustTracker: true,
            position: {
                x: "right",
                y: "center"
            },
            outside: "x",
            closeOnMouseleave: 1
        })
    }

}

function showInfoUserComment(idComment, userId) {
    var data = {
        ajax_action: "ajax_pe_get_info_user_comment",
        id: idComment
    };
    if (typeof userId !== "undefined") data.user_id = userId;
    new jBox("Tooltip", {
        trigger: "mouseenter",
        animation: "zoomOut",
        addClass: "puzzle-tooltip puzzle-tooltip_size_l puzzle-tooltip_theme_comments",
        attach: $(".showInfoUser_" + idComment + " span"),
        zIndex: 203,
        ajax: {
            url: "/",
            method: "post",
            data: data,
            reload: "strict",
            setContent: false,
            complete: function(response) {
                this.setContent(response.responseText)
            }
        },
        width: 480,
        adjustTracker: true,
        position: {
            x: "center",
            y: "bottom"
        },
        outside: "y",
        closeOnEsc: true,
        blockScroll: false,
        closeOnMouseleave: "1",
        adjustDistance: {
            top: 55,
            right: 5,
            bottom: 5,
            left: 5
        }
    })
}

function deleteParamFromUrl(prmName) {
    var res = "";
    var d = location.href.split("#")[0].split("?");
    var base = d[0];
    var query = d[1];
    if (query) {
        var params = query.split("&");
        var keyval;
        for (var i = 0; i < params.length; i++) {
            keyval = params[i].split("=");
            if (keyval[0] !== prmName) {
                res += params[i];
                if (params[i + 1] !== undefined) res += "&"
            }
        }
    }
    return base + "?" + res
}

function pe_read_comment(idComment, self, isPhrase) {
    var $self = $(self);
    if (isPhrase === false) $self = $(self).find(".pe-comment-readed");
    var howRead = $self.attr("data-action") == "0" ? 1 : 2;
    $.ajax({
        type: "POST",
        url: "/",
        success: function(res) {
            if (res.status == "error") alert(res.html);
            else {
                var read = localize({
                    l: "read_this_comment",
                    n: "comments",
                    v: "1",
                    t: "first"
                });
                var readed = localize({
                    l: "read_this_comment",
                    n: "comments",
                    v: "2",
                    t: "first"
                });
                if (howRead == 1) $self.html(readed).closest("li").css({
                    "background-color": "#e0e0e0"
                });
                else $self.html(read).closest("li").css({
                    "background-color": "inherit"
                });
                if (isFeed !== false) {
                    var idLi = isPhrase !== false ? "comment-" + idComment : "pe-comment_" + idComment;
                    $self = $self.closest("li.balloon-row").find(".hideOneCommentForButton li#" + idLi + " .pe_read_com:first");
                    if (howRead == 1) $self.html(read).closest("li").css({
                        "background-color": "#e0e0e0"
                    });
                    else $self.html(readed).closest("li").css({
                        "background-color": "inherit"
                    })
                }
                $self.attr("data-action", howRead == 1 ? 1 : 0)
            }
        },
        data: {
            ajax_action: "ajax_pe_read_comment",
            idComment: idComment,
            howRead: howRead
        },
        dataType: "json"
    })
}

function add_to_trusted_feed(idComment, self, isPhrase) {
    var req = {
        ajax_action: "ajax_pe_update_comment_for_any",
        what: "feed_for_trusted",
        id_comment: idComment
    };
    var $self = $(self);
    if (!$self.hasClass("is-active")) {
        $self.addClass("is-active").css({
            "border-bottom": "1px dashed #4e22a8"
        }).find("b").css({
            "font-weight": "bold",
            color: "#4e22a8"
        });
        req.paramForWhat = 1
    } else {
        $self.removeClass("is-active").css({
            "border-bottom": "1px dashed #1caaec"
        }).find("b").attr("style", "font-weight: normal;");
        req.paramForWhat = 0
    }
    $.post("/", req, function(res) {
        if (res != "error")
            if (res.status == "error") alert(res.html)
    }, "json")
}
var isTrustedUser = false;